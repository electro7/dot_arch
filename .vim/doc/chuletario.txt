*chuletario.txt*  Chuletario personal     Last change: 21 jul 2015

chuletario                                              *chuletario* *chuleta*

Mi chuletario personal, debido a mi poca o nula memoría

==============================================================================
==============================================================================
CONTENIDO                                                 *chuleta_contenido*

  - Cambiar la ip                                   |chuleta_ip|
  - El fstab                                        |chuleta_fstab|
  - Paquetes debian                                 |chuleta_paquetes|
  - Compilar kernel en Debian                       |chuleta_debian_kernel|
  - Cron y Anacron                                  |chuleta_cron|
  - Correo el estilo linux                          |chuleta_correo|
  - Módulos                                         |chuleta_modulos|
  - Gnupg                                           |chuleta_gnupg|
  - Paginas de manual                               |chuleta_man|
  - Conexión segura con SSH                         |chuleta_ssh|
  - Compartir archivos con NFS                      |chuleta_nfs|
  - Compilar paquetes en Debian                     |chuleta_compilar_debian|
  - En hora con NTP                                 |chuleta_ntp|
  - Ordenar MP3                                     |chuleta_mp3|
  - Fuentes, temas, iconos                          |chuleta_fuentes_temas_gtk|
  - Drivers NVIDIA                                  |chuleta_nvidia|
  - Wireless                                        |chuleta_wireless|
  - Versionitis con GIT                             |chuleta_git|
  - Instalando fuentes                              |chuleta_checkinstall|
  - Instalando Linux en SSD                         |disco_ssd|
  - Weechat + BitlBee (IRC + Mensajería)            |weechat_bitlbee|
  - Samba fácil                                     |samba_facil|
  - MPD y ncmpcpp                                   |mpd_ncmpcpp|
  - Systemd en Debian                               |systemd|
  - Servidor DLNA en Debian                         |dlna|
  - systemctl en archlinux                          |systemctl| |arch|
  - Red en archlinux                                |netctl| |arch|
  - Paquetes archlinux                              |pacman| |arch|
  - Bluetooth archlinux                             |bluez| |arch|
  - WSL en windows 10                               |wsl| |win10|

==============================================================================
==============================================================================
CAMBIAR LA IP                                                   *chuleta_ip*

Se hace con "ifup" y "ipdown" >
  ifup eth0; ifdown eth0
<
El archivo de configuración es {/etc/network/interfaces} donde se indica
la dirección IP, la mascará, el gateway, etc.
>
  # La interfaz loopblack
  iface lo inet loopback

  # Las tarjeta de red
  iface eth0 inet static
    address 192.168.0.79
    netmask 255.255.255.0
    network 192.168.0.0
    broadcast 192.168.0.255
>

El archivo /etc/network/config sirve para activar cosas como el paso
del paquetes de una interfaz a otra (ip_forward).

Para añadir varias IP a la misma interfaces, basta con crear un alias.
>
  auto eth0:0
  iface eth0:0 inet static
    addres 192.168.1.79
>
==============================================================================
EL FSTAB                                                     *chuleta_fstab*

- Para que los usuarios puedan montar el cdrom y el floppy hay que añadir
la opción "user". Se montaria con "mount /cdrom".

- Para que puedan escribir en vfat/ntfs (del root) hay que poner en las opciones
"gid=6,umask=0007,fmask=0117" y añadir el usuario al grupo disk (6). La opción "quiet"
sirve para que al mover o copiar los archivos no aparezcan un mensaje de error
al no poder mantener permisos. Con "utf8" funcionan algunos caracteres raros
como la ñ.

- Para soporte ntfs hay que instalar el paquete "ntfs-3g".

- Añadir una nueva unidad con formato linux (ext3, ext4, etc...) solo hay que
  poner "defaults" en opciones, dar permiso a grupo "disk" en el directorio y
  añadir los usuarios pertinentes al mismo grupo

Ejemplo:
>
  # «file system» «mount point»   «type»  «options»           «dump»  «pass»
  /dev/hda3   /           ext2    defaults,errors=remount-ro  0       1
  /dev/hda2   none        swap    sw                          0       0
  proc        /proc       proc    defaults                    0       0
  /dev/hda1   /hdwin      ntfs-3g gid=6,umask=0007,fmask=0117,utf8,quiet    0       0
  /dev/hdd1   /hdextra    vfat    gid=6,umask=0007,fmask=0117,utf8,quiet    0       0
  /dev/fd0    /floppy     auto    defaults,noauto,user        0       0
  /dev/cdrom  /cdrom      iso9660 defaults,ro,noauto,user     0       0
  /dev/cdrw   /cdrw       iso9660 defaults,ro,noauto,user     0       0
  /dev/sda1   /mnt/PenDrive       auto    defaults,noauto,user        0 0
  /dev/sdb3   /mnt/hdextra ext4 default 0 0
  linuxe7:/home   /mnt/LinuxE7    nfs defaults,rw,noauto,user 0       0
<
==============================================================================
APT Y DPKG                                               *chuleta_paquetes*

El apt se configura en {/etc/apt/source.list}. El source.list (apt-setup)
contiene los servidores de donde pillar los paquetes con el formato:
>
  deb ftp://ftp.es.debian.org/debian unstable main contrib non-free
  deb ftp://ulises.adi.uam.es/debian stable main contrib non-free
<

- update ~
  Lo tipico con el apt es hacer un "apt-get update" para bajarse la lista
  de paquetes y hacer un "apt-get install {paquete]" para instalar. Con "apt-get
  check" y "apt-get -f install" nos aseguramos que todas las dependencias estan
  bien. Con "apt-get upgrade" se actualiza todo el sistema.

- search ~
  Para buscar paquetes disponibles en los servidores tenemos el "apt-cache
  search {paquete}" y para buscar algún paquete el en sistema se usa el "dpkg -l
  {paquete]"

- clean ~
  Para mantener limpito el sistema se usa "apt-get clean" y el "apt-get
  autoremove".

- dpkg ~
  dpkg -i -» instalar
  dpkg -r -» desinstalar
  dpkg -P -» desinstalar hasta los ficheros de configuración
  dpkg -P -» purge (desinstala hasta archivos de configuración)
  dpkg --configure -a -» configura todos los paquetes desconfigurados
  dpkg -L -» muestra los archivos de un paquete instalado
  dpkg -s -» muestra información de un paquete
  dpkg -S -» busca un fichero en todos los paquetes instalados
  dpkg -c -» muestra los archivos de un .deb
  dpkg -I -» muestra info de un .deb

- hold ~
  Para marcar algún paquete para que no se actualize se utiliza "dpkg
  --set-selections".
>
    dpkg --set-selections
    mutt hold
    [CTRL+D]
>
- task ~
  En Debian existen tareas para actualizar grandes sistemas de paquetes.
  Normalmente depende de un paquete global llamado "task".

- apt-file ~
  Para buscar en el contenido de los paquetes instalamos el apt-file.
  Hay que hacer un "apt-file update" para descargar el gz del contenido, luego
  usar con  "apt-file search <fichero>"

==============================================================================
COMPILAR KERNEL EN DEBIAN                          *chuleta_debian_kernel*

Instalar los paquetes "build-essential", "libncurses5-dev"y el
"kernel-package". Extraer el codigo a {/usr/src/linux/}.

Para configurar: make "config, menuconfig, xconfig". "make mrproper"
limpia entre compilaciones.

Podemos copiar el config del actual kernel que normalmente se encuentra
en /boot.

Compilar con "make-kpkg --initrd -rev Custom.N kernel_image kernel_headers",
donde N es el número de imagen a asignar.

Instalar el kernel y los headers. Se descomprime en /boot.

==============================================================================
CRON Y ANACRON                                                *chuleta_cron*

En DEBIAN el CRON llama a ANACRON (un demonio que ejecuta las tareas sin
necesidad de estar 24h rulando, la hace por intervalo de tiempo).

La configuración se hace en {/etc/anacrontab} y las tareas se ejecutan en
ficheros ejecutables que residen en {/etc/cron.daily}, {/etc/cron.weekly} y
{/etc/cron.monthly}, para las tareas que se ejecutan todos los dias, por
semanas y por meses, respectivamente.

==============================================================================
CORREO AL ESTILO LINUX                                      *chuleta_correo*

Programas necesarios: Sendmail, fetchmail, mutt y xmailbox.

Configuramos Sendmail de manera muy simple (el que envia al smtp):

* En "# "Smart" relay host (may be null)" ponemos nuestro servidor SMTP
de la manera "DSsmtp.ono.com".
* En "# who I masquerade as (null for no masquerading)" se pone el
enmascaramiento de la dirección de correo que debe hacer -»
"DMono.com".

Casi todo esto lo pregunta el paquete Debian al instalarse.
Cuando terminemos de editar parar con /etc/init.d/sendmail stop y
relanzar con start.

Si no utilizamos el Sendmail y obtamos por el exim lo más importante es
añadir en el fichero "/etc/email-addresses" las direcciones de correo correctas
usadas para enviar correo hacía fuera. Una línea por cada usuario que envia
correo.Configurar exim4 para enviar a través de GMAIL
<http://wiki.debian.org/GmailAndExim4>

Configuramos fetchmail (el que recoge al pop).  Se configura para cada usuario
en {.fetchmailrc}

Un ejemplo:
>
  # Recoge el correo cada x minutos
  set daemon 1800
  set syslog
  # Carga las opciones por defecto
  defaults
    fetchall flush pass8bits
  # Ono
  poll pop3.ono.com proto pop3:
  user electro7 pass hobbit6 to electro7;
  # Curro
  poll 213.0.68.12 proto pop3:
  user vicenteg pass vgimeno to electro7, keep, no flush, no
  fetchall;

El fetchmail debe ejecutarlo cada usuario. Con la opción "set
daemon" se ejecuta como demonio cada X segundos. Lo mejor es meterlo
en el .bashrc o en el arranque de las X. El fetchmail solo permite
una ejecución de él mismo, así que no hay peligro de llamarlo desde
los scripts.

Instalamos y correo hacía fuera. Una línea por cada usuario que envia
correo. configuramos el mutt. Se configura con el .muttrc. Esta muy bien
este cliente de correo, nos va a servir tanto para leer el correo interno
como el recogido con fetchmail.

Proceso de recepción y tratamiento:
* El fechmail lo recoge y la mete en /var/mail/<user>
* El procmail lo captura y según las reglas definidas lo guarda en un fichero.
* El mutt lee los ficheros donde procmail guarda los correos.
* El mailcheck chequea si hay correos nuevos revisando los ficheros.

----------------------------------------------------------------------------
ACTUALIZACIÓN CON GMAIL

Chequeamos si fetchmail tiene soporte openssl con "ldd /usr/bin/fetchmail"
Si sale una línea con libssl.so.*, tenemos.

Testeamos el certificado de gmail con "openssel s_client -connect pop.gmail.com:995"

Configuramos .fechmailrc tal que así:
>
  set daemon 600
  set syslog
  defaults
  fechall flush
  set postmaster "electro7"
  poll pop.gmail.com with proto POP3
  user 'agmviv@gmail.com' there with password '<pass>' is electro7 here optins ssl

Probamos con "fetchmail -d0 -vk pop.gmail.com". Las trazas van al syslog.

==============================================================================
MODULOS                                                     *chuleta_modulos*

Para saber que quiere decir el mensaje "modprobe: Can locate module
char-mayor-X", primero hay que mirar que dispositivo esta buscando
obteniendolo de /dev, los dos numeros que aparecen en vez del tamaño
corresponden a la X.

Después para que no aparezca el mensaje basta con poner en
/etc/modules.conf la línea "alias char-major-X off" si no lo vamos
a utilizar.


==============================================================================
GNUPG                                                        *chuleta_gnupg*

Para generar la clave se utiliza "gpg --gen-key" y utilizamos el
algoritmo DSA/ElGamal.

Se exporta con "gpg -a --export » clave".

Se importan claves con "gpg --import fichero". Puede incluir más de
una clave.

Se crea la clave de revocación (por si perdemos nuestra clave
privada) con "gpg --gen-revoke".

Más comandos:

  gpg --list-keys -» muestra las claves públicas disponibles
  gpg --delete-key -» borra una clave pública
  gpg --edit-key -» edita un clave (para validarla)
  gpg --armor -e [fichero] -» codifica un fichero
  gpg -s [fichero] -» firma un fichero
  gpg [fichero] -» decodifica io verficar la firma de un fichero

Mutt -» después de escribir los mensajes y antes de postearlo se
pulsa "p" y aparece el menú de PGP.

SLRN -» Utilizando el pgpg-stuff.sh.

==============================================================================
MAN                                                           *chuleta_man*

Para que funcione bien el scroll en el man hay que instalar "less".
Puede ser necesario la variable de entorno PAGER='less' en el .bashrc

==============================================================================
SSH                                                          *chuleta_ssh*

Vamos a poner la cosa un poco más segura que un telnet.

- Instalamos en paquete "ssh" que en realidad en el ssh del Openssh -»
  www.openssh.com.
- Hay que instalarlo tanto en la máquina servidor como en la cliente.
  Usaremos la autentificación de 1024 bits de RSA y si falla está la clave
  de usaurio (de momento).
- Activamos el sshd en la máquina servidor. No lo arranca el inetd.conf
  porque necesita generar la clave del servidor de 768 bits y puede tardar
  10 segundos en cada arranque. Se arranca en el runlevel.
- El fichero de configuración del sshd es el {/etc/ssh/sshd_config}. Las
  opciones más interesantes son:
  - Port : Puerto de escucha.
  - X11Forwarding : Para poder lanzar aplicaciones X.
  - KeepAlive : Mantener conexión.
  - RSAAutehticacion : Autentificación por clave RSA (la que usaremos):
  - PermitRootLogin : Permitir acceso de root (no).
  - PasswordAuthentication : Autentificación por clave normal. Al
    principio la dejaremos activada, después solo usaremos la RSA con
    clave pública/privada.
- Se relee la configuración con "/etc/init.d/ssh reload".
- Ya nos podemos conectar con el servidor con "ssh -p «puerto» «máquina»".
  Solo podremos entrar con la clave normal, pero ya todo encritado.
- Después nos generamos la clave RSA con "ssh-keygen" que nos crea los
  ficheros "identity" (clave privada) y "identity.pub" (clave pública). Es
  buena idea darle una frase de paso.
- Después copiar la clave pública en el servidor con "ssh-copy-id
  «servidor»". También se puede copiar a mano el fichero
  "$HOME/.ssh/identitu.pub" en el servidor a "$HOME/.ssh/authorized_keys".
  Se puede tener más de una clave almacenada en el servidor.
- Se copia ficheros de modo seguro con "scp".
- Ya podemos entrar con RSA y desactivar la clave normal en el sshd.
- Se puede configurar el cliente ssh con el fichero "/etc/ssh/ssh_config".
  Lo más importante:
  - Host : Máquinas que le afectan las opciones.
  - ForwardAgent : Para conectar aplicaciones X.
  - ForwardX11 : Para conectar aplicaciones X.
  - Port : Puerto a utilizar.
- Para que se pueda ejecutar aplicaciones X en el servidor y que se vean en
  las X locales, se de añadir la opción "use-ssh-agent" en
  "/etc/X11/Xsession.options". De este modo se ejecutara las X a través de
  "ssh-agent" que permitirá identificar cualquier cliente automáticamente.
  Podemos identificar una sesión lanzando un shell con "ssh-agent bash".
- Después hay que proporcionar a "ssh-agent" la clave privada con el comando
  "ssh-add" e introduciendo la frase de paso.
- A partir de ese momento cada vez que nos introduzcamos en el servidor la
  variable DISPLAY se redirecciona a el servidor local de las X con una
  especie de servidor virtual en el servidor con una comunicación encritada
  y autentificada.
- Se pueden ejecutar automáticamente aplicaciones con "ssh -f «server»
  «comando»".

----------------------------------------------------------------------------
ACTUALIZACIÓN

- Para utilizar el ssh con protocolo 2 basta con poner en
  "/etc/ssh/sshd_config" la opción "protocol=2".
- La autentifiación con ssh2 se realizaon RSA siempre. Hay que generar la
  clave con "ssh-keygen -t rsa".
- La clave en el remoto se sigue poniendo en "$HOME/.ssh/authorized_keys".
  Cada clave se pone en una solo línea, sin retornos de carro.

----------------------------------------------------------------------------
TUNELES

- Se puede hacer un tunel para redireccionar un puerto y encriptar la
  comunicación. SSH abre un puerto en la máquina local, se conecta a la
  máquina remota y hace un puente con el puerto remoto especificado. De este
  modo la conexión que se hace al puerto local se envia al puerto
  especificado del remoto en una conexión segura.
- Ej. ssh -L 32000:localhost:4080 electro7@viv.no-ip.org
  Direcciona el puerto 32000 de la máquina local al puerto 4080 de
  viv.no-ip.org, ya que se ha especificado localhost.
- Ej. ssh -L 33000:192.168.0.79:80 electro7@viv.no-ip.org.
  Direcciona el puerto local 33000 al puerto 80 de la máquina 192.168.0.79,
  que está en red local con viv.no-ip.org.
- Ej. ssh -R 80:localhost:33000 electro7@viv.no-ip.org
  Túnel inverso, el remoto se conecta al puerto 80 del local al acceder al
  puerto 33000 de localhost.

----------------------------------------------------------------------------
SERVIDOR X EN WIN

- Se usa el putty y el VcXsrv (GPL).
- En putty:
    - Activar la opción "Allow agent forwardinf" en Connection->SSH->Auth.
    - Activar la opción "Enable X11 forwardinf" en Connection->SSH->X11 y en
      "X display location" poner "localhost:0".
- En VcXsrv:
    - Arrancarlo y punto. Multiventana y a rular.
- Arrancar directamente un RXVT bonito:
    - Usar el script X_remote en bin.
    - Activar el "ForwardAgent yes" y "ForwardX11 yes" en
      {/etc/ssh/ssh_config}.
    - Copiar las fuentes necesarias al directorio fonts de VcXsrv y hacer un
      xset fp+ fonts/<font dir>/ (ya lo hace el scrip).
    - Desde windows usar el "plink.exe" en un acceso directo. Ej:
>
    plink.exe -ssh <ip_maquina> -l <user> -pw <password> -X "~/bin/X_remote"
<
==============================================================================
NFS                                                            *chuleta_nfs*

SERVIDOR

Compilar el kernel con soporte de NFS. Filesystem -» Network
Filesystem en el cliente y el servidor. En el servidor también incluir
soporte de servidor NFS. Instalar en el servidor el "nfs-kernel-server".

Añadir los directorios exportados a {/etc/exports}.
Ej:
>
  /home casiopea(rw)

Añadir las máquinas que tendran acceso con hosts.deny y hosts.allow. Se
mirar gracias al portmapper. No se puede utilizar nombres de hosts, solo ALL
o direcciones IP completas para el portmapper, sino da "RPC: programa no
registrado".

Reiniciar el servidor: "/etc/init.d/nfs-kernel-server restart"

Los directorios exportados en el servidor se ven en /proc/fs/nfs/exports
o con un "exportfs" y se ve si el nfs está rulando con "rpcinfo -p".

Si modificamos el /etc/exports hay que hacer un "exportfs -ra".

Para que los archivos copiados o creados en un directorio nfs se creen
siempre con el mismo uid y gid hay que exportarlos de la siguiente manera:
>
  /home/www morgana(rw,all_squash,anonuid=33,anongid=33)

CLIENTE

Instalar en el cliente el nfs-common. Montar las unidades con
"mount -t nfs linuxe7:/home /mnt/Linuxe7".

Para que cualquier usuario pueda desmontar y montar las unidades añadir
al /etc/fstab lo siguiente:
>
  linuxe7:/home   /mnt/LinuxE7    nfs     rw,noauto,user 0       0

==============================================================================
COMPILAR PAQUETE DEBIAN                           *chuleta_compilar_debian*

- Lo bajamos con "apt-get source <paquete>"
- Instalamos las dependandias con "apt-get build-dep <paquete>"
- Para compilar optimizado para nuestra arquitectura, obtenemos toda la
  información de la cep con "cat /proc/cpu" y luego buscamos las mejores
  opciones para el "export CFLAGS" en http://en.gentoo-wiki.com/wiki/Safe_Cflags
- Con "export CHOST" se puede definir la arquitectura.
- Compilamos con "dpkg-buildpackage -us -uc"
- Para que no se actualize si lo instalamos "echo <paquete> hold | dpkg
  --set slections"


==============================================================================
EN HORA CON NTP                                               *chuleta_ntp*

- Instalar el paquete ntp. El solo hace las preguntas pertinentes.
- Seleccionar correctamente la hora con "tzsetup".
- Los servidores recomandables son "hora.rediris.es",
"ntp.escomposlinux.org" y "chronos.bulma.net".
- La configuración está en el fichero "/etc/ntp.conf".
- El demonio como siempre se controla desde "/etc/init.d".
- Con "ntptrace" vemos información de las actualizaciones.
- El demonio ntpd está pensado para servidor 24 h, para "casa", es mejor
utilizar el ntpdate.
- Instalar el paquete ntpdate.
- Los servidores se guardan en "/etc/default/ntp-servers".
- Con "ntpdate -d hora.rediris.es" actualiza.
- Poner el script "/etc/init.d/ntpdate" en el runlevel para que se
actualice en el arranque (o con anacron). Por defecto lo pone en "rcS.d".

==============================================================================
ORDENAR MP3                                                   *chuleta_mp3*

- Formato tipo -» "Nº pista - Autor - Canción.mp3".
- Lo hacemos "Shell friendly" convirtiendo espacios a subrayados.
- Utilizar el "mp3mover.pl". Lo hace todo. Se basa en el .mp3moverrc.
  - Necesita instalar el libmp3-tag-perl para modificar los tags de MP3.
- Crear un lista de reproducción con el nombre "000_Playlist.m3u". Usar el
  alias "lsmp3" para hacer el volcado del directorio.
- Utilizar "id3v2" para ver y editar los tags mp3 en caso necesario.
- Las carátulas, pues simplemente "back.jpg" y "cover.jpg".

==============================================================================
FUENTES TEMAS ICONOS GTK                          *chuleta_fuentes_temas_gtk*

- Fuentes PCF-BDF.
  - Crear fichero fonts.dir en el directorio con "mkfontdir".
  - Añadir al recurso de fuentes con xset +fp <ruta directorio>
  - Debería ya estar disponibles. Se lista con xlsfonts.
  - Los BDF se pueden editar con el gbdfed. Normalmente aumenta la separación.
    Hacer una copia del BDF antes de editarlo y luego mirar las diferencias
    del campo WITH de cada letra para ponerlo como antes.
  - Se puede visualizar con el xfd -fn <nombre fuente>.
- Fuentes TTF: Copiar las ttf en ".fonts" de $HOME. Ejecutar "fc-cache".
  - Se puede visualizar con el xfd -fa <nombre fuente>.
- Temas: Copiar a ".themes".
- Iconos: Copiar a ".icons".
- Selección de colores: Usar el gcolor2.
- Selección de temas GTK: Usar el lxapareance.
- Para instalar las fuentes de windows en Debian, añadir la rama "contrib" al
  {/etc/apt/source.list} e instalar el paquete "ttf-mscorefonts-instaler".

==============================================================================
DRIVERS NVIDIA                                               *chuleta_nvidia*

- Instalar el paquete "build-essential".
- Instalar el paquete "apt-get install linux-headers-`uname -r`"
- Bajarse los ultimos drivers de la página de NVIDIA.
- Parar las X y el GDM/LIGHTDM.
- Ejecutar como root "sh NVIDIA..."
- Relanzar el gdm/lightdm

==============================================================================
WIRELESS                                                  *chuleta_wireless*

----------------------------------------------------------------------------
EN MANZANITA

- Añadir los paquetes contrib y nonfree a las fuentes del repositorio.
- "apt-get install firmware-b43-installer"
- Se debe cargar solo el modulo, sino "modprobe b43".

EN HP
- Añadir los paquetes contrib y nonfree a las fuentes del repositorio.
 - "apt-get install firmware-ipw2x00 wireless-tools"
- Se debe cargar solo el modulo, sino "modprobe ipw2200".

La red wifi se configura con "iwconfig" y "iwlist." Pero mejor hacerlo
automático en "/etc/network/interfaces".

Ejemplo de conexión con WPA-PSK.
>
  auto wlan0
  #iface wlan0 inet dhcp
   wpa-driver wext
   wpa-ssid "Mis vecinos apestan"
   wpa-psk anillos7
   wpa-key-mgmt WPA-PSK
   wpa-group TKIP CCMP
   wpa-proto WPA

O también, dejarlo de la mano del demonio network-manager de gnome. Arrancar
el "nm-applet" y au!.

- "apt-get install gnome-network-manager"
- Dejar el fichero "/etc/network/interfaces" solo con la entrada del loopback.
- Reiniciar.
- Desde las X podemos cambiar de redes con el "nm-applet". Solo se puede
  arrancar si el gestos de ventanas tiene un systray. Si no lo tiene (fvwm)
  usar el "stalonetray" que es estandar.
- Se puede configurar desde la X con "nm-conection-editor".
- Desde consola podemos usar el nm-tool, el nmcli y el nm-online.

==============================================================================
GIT                                                              *chuleta_git*

BASICO                                                    *chuleta_git_basico*

- git init ~
  Crea un nuevo repositorio local

- git clone </path/to/repository> ~
  Crea una copia local de un repositorio remoto.

- El repositorio local esta compuesto por tres "árboles" administrados por git.
  El primero es tu Directorio de trabajo que contiene los archivos, el segundo
  es el Index que actua como una zona intermedia, y el último es el HEAD que
  apunta al último commit realizado.

- git add <filename> ~
  Añade cambios en Index.
  "git add ." añade todos.
  "git add -i" añade interactivamente.

- git rm <filename> ~
  Borra el fichero del disco y de git

- git rm --cached <filename> ~
  Borra solo el fichero de git

- git commit -m <Mensaje> ~
  Añade los cambios al HEAD.

- git commit -a -m <Mensaje> ~
  Añade a la vez los cambios a Index y a HEAD.

- git log ~
  Histórico de cambios.

- git status ~
  Estado de repositorio.

RAMAS                                                       *chuleta_git_ramas*

- git branch <rama> ~
  Crea una rama de desarrollo.
  Las ramas son utilizadas para desarrollar funcionalidades aisladas unas de
  otras. La rama master es la rama "por defecto" cuando creas un repositorio.
  Crea nuevas ramas durante el desarrollo y fusiónalas a la rama principal
  cuando termines.

- git checkout -b <rama> ~
  Crear y cambiar a una rama de una vez.

- git checkout master ~
  Vuelve a la rama principal.

- git checkout -d <rama> ~
  Borra una rama.

- git merge <rama> ~
  Fusiona una rama de desarrollo con master. "git merge <branch>"
  Desafortunadamente, no siempre será posible y se podrán producir conflictos.
  Tú eres responsable de fusionar esos conflictos manualmente al editar los
  archivos mostrados por git. Después de modificarlos, necesitas marcarlos como
  fusionados con git add <filename>. Antes de fusionar los cambios, puedes
  revisarlos usando git diff <source_branch> <target_branch>.

REMOTO                                                    *chuleta_git_remoto*

- git remote add origin <server> ~
  Añade repositorio remoto.
  Ahora podrás subir tus cambios al repositorio remoto seleccionado.

- git push origin master ~
  Envia los cambios de la rama master al repositorio remoto.
  (Reemplazar "master" por la rama que se quiera enviar).

- git push origin <branch> ~
  Envia, actualiza y fusiona la rama en el remoto.

- git pull ~
  Recibe del remoto y actualiza el repositorio local.

- git remote -v ~
  Muestra los repositorios remotos configurados

- git remote set-url origin git@github.com:electro7/dotfiles.git ~
  Cambia el acceso remoto a GIT con SSH para el repositorio "origin".

VARIOS                                                    *chuleta_git_varios*

- git tag ~
  Crear etiquetas de commits.
  "git tag 1.0.0 1b2e1d63ff" <1b2e1d63ff>  se refiere a los 10 caracteres
  del commit id al cual quieres referirte con  tu etiqueta. Puedes obtener
  el commit id con "git log".

- git checkout -- <filename> ~
  Revierte los cambios del archivo al último commit.

- git reset ~
  Por otro lado, si quieres deshacer todos los cambios locales y  commits,
  puedes traer la última versión del servidor y apuntar a tu copia  local
  principal de esta forma "git fetch origin" "git reset --hard origin/master"

- Clonar un repositorio en un directorio NO vacio ~
>
  git init
  git remote add origin "repositorio remoto"
  git pull origin master
  git branch --set-upstream-to=origin/master master
<
==============================================================================
CHECKINSTALL                                          *chuleta_checkinstall*

- Después de compilar cierto software con "./configure" o "make" o lo que sea,
  toca instalarlo en la máquina. Para hacerlo de forma limpia, creando un
  paquete <deb> usaremos el checkinstall.
>
  apt-get install checkinstall
<

- checkinstall -D <make install> ~
  Creará el .deb y lo instalará. En el proceso preguntará por ciertos datos
  para incluir en el paquete, como las dependencias.

==============================================================================
DISCO SSD                                                      *disco_ssd*

Consejos para instalar linux en unidad SSD:

- Crear partición separada para /home y /var en disco duro normal.

- Instalar el sistema en /. En las opciones de {/etc/fstab} añadir "discard" y
  "noatime". Esto hace que el sistema ext4 tenga soporte para el TRIM en esa
  partición.
>
  /dev/sda2   ext4 discard,noatime,errors=remount-ro 0 1

- En vez de usar el "discard" en el {/etc/fstab} podemos optar por ejecutar
  cada día un "fstrim -v /" añadiendo un script al cron.daily.

- Para los archivos temporales en {/tmp}, editar el {/etc/default/tmpfs} y
  poner el "RAMTMP" a "yes", luego añadir la siguiente línea al {/etc/fstab}
>
  tmpfs /tmp tmpfs noatime,nodiratime,nodev,nosuid,mode=1777,defaults 0 0
<
  De esta manera se usa un RAMDISK para el /tmp.

==============================================================================
WEECHAT Y BITLBEE                                          *weechat_bitlbee*

Con esta combinación conseguimos IRC, TWITTER, y acceso a cuentas de
mensajería como Google Talk, Jabber, ICQ, etc...

- weechat ~
  - Instalar con "apt-get install weechat".
  - La configuración actualizada ya esta en la cuenta de GitHub.
  - Los scripts se instalan con "/script". "buffers.pl", "iset.pl", "beep.pl
    son los inprescindibles.
  - Registrarse en freenode con "/msg NickServ identify <password>"

- bitlbee ~
  - Aunque Debian lleva paquetes, vamos a por los últimos. Añadir lo siguiente
    a {/etc/apt/source.list} (cambiar jessie por la distribución usada, necesita
    firma de repositorio, ver la página web de bitlbee).
>
    deb http://code.bitlbee.org/debian/master/jessie/amd64/ ./
<
  - Tras el correspondiente "apt-get update; apt-get upgrade", instalar con
    "apt-get install bitlbee".
  - El instalador crea el usuario y el grupo <bitlbee>.
  - Instalar el inetd. "apt-get install openbsd-inetd".
  - Editar el {/etc/inetd.conf}, añadiendo:
>
    6667 stream tcp nowait bitlbee /usr/sbin/tcpd /usr/sbin/bitlbee
<
  - Reiniciar el inetd con "/etc/init.d/openbsd-inetd restart".
  - La configuración de cuentas del bitlbee está en el fichero
    {/var/lib/bitlbee/electro7.xml}. Basta con copiarla y darle permisos de
    lectura/escritura solo al usuario/grupo bitlbee.

- Resumen final ~
  - Arrancar el weechat y ya debería conectarse a las cuentas de twitter y
    mensajería a través del bitlbee.
  - Las alertas de privados se ejecutan con un trigger de weechat que llama al
    script {$HOME/bin/irc_warn}.
  - Alt+R en weechat resetea las alertas.
  - El weechat está configurado para usar algunas cosas como el vim:
      - :c -> limpia ventana
      - :q -> cierra canal
      - :x -> cierra programa

==============================================================================
SAMBA FACIL                                                   *samba_facil*

Instalar y configurar Samba en comodos pasos:

- Instalar los paquetes samba y smbclient.
- Crear usuarios en el sistema con "adduser" y añadirlos a samba con
  "smbpasswd -a <usuario>".
- Editar el fichero {/etc/samba/smb.conf}
  - Editar lo necesario para cambiar el grupo de trabajo, los homes visibles y
    poco más.
  - Ejemplo para crear un compartido:
>
  [hdextra]
    comment = Librería y Backup
    path = /mnt/hdextra
    read only = no
    writable = yes
    browseable = yes
    create mask = 0660
    directory mask = 0770
    group = disk
    valid users = electro7
>
- Reiniciar con "etc/init.d/samba restart"
- "smbclient -L 127.0.0.1" ya debería mostrar bien los recursos compartidos.

- Para montar un directorio externo hay que instalar el paquete "cifs-utils" y
  editar el fstab añadiendo algo así:
>
    //titan/work /mnt/work cifs noauto,user,username=<user>,paswword=<pass> 0 0
<
==============================================================================
MPD Y NCMPCPP                                                   *mpd_ncmpcpp*

Instalar reproductor de música para consola:

- Instalar los paquetes "mpd" y "ncmpcpp".

- mpd ~
  - Quitar el demonio general del MPD del arranque con "systemctl disable mpd"
    y un "sustemctl disable mpd.socket". Un "netstat -lntp" ya no debería listar
    el puerto 6600.
  - Lo arrancaremos como usuario con un simple "mpd" desde .bash_rc mismo.
  - El fichero de configuración va en {.config/mpd/mpd.conf}
    - Lo más importante es poner el path con la líbrería de música.
  - Hace falta crear el directorio {.config/mpd/playlists}.
  - Hace falta crear los archivos {mpd.pid} {mpd.db} {mpd.log} {mpd.state} y
    {sticher.sql} con un simple "touch".

- ncmpcpp ~
  - El fichero de configuración va en {.ncmpcpp/config}

==============================================================================
SYSTEMD                                                          *systemd*

Al final han quitado nuestro querido systemv en debian y han puesto en
systemd.

Cosillas:

- Los servicios se controlan con "service" -> Ej: "service <talcual> stop"
- El update-rc.d sigue funcionando, pero solo para ciertas cosas.
- Por ejemplo, para no arrancar las X en el inicio hay que hacer:
  "systemctl set-default multi-user.target"
- Para volverlas a poner:
  "systemctl set-default graphical.target"

==============================================================================
SERVIDOR DLNA                                                    *dlna*

Sirve para compartir multimedia para aplicaciones clientes DLNA y uPNP, para
el chromecast, por ejemplo:

- Instalar el minidlna.
- Editar el archivo {/etc/minidlna.conf}
  - Basicamente editar el directoio donde encontrar los medios multimedia. Si
    es un directorio personal, añadir el usuario minidlna al grupo y darle
    permisos de lectura a ese directorio.
  - Poner el "inotify=yes".
  - Hacer un "servide minidlna restart"
  - Añadir "fs.inotify.max_user_watches = 100000" a {/etc/sysctl.conf} para
    que minidlna pueda vigilar el cambio de hasta 100000 archivos de los
    directorios especificados y actualizar su BD.
  - Para poner fotos personalizacas, basta con poner "cover.jpg" en la carpeta
    y para cada archivo el un jpg con el mismo nombre, quitando la extensión.

- Se usan los puertos 1900 y 8200.

- Listo. Se puede ver el estado desde web al puerto 8200 del servidor.

==============================================================================
VIRTUALBOX CONSOLA                                               *virtualbox*

Se hace la administración desde "VboxManage":

- VBoxManage list vms ~
  Muestra las máquinas virtuales disponibles.

- VBoxManage startvm <maquina>~
  Arranca la máquina.

- VBoxManage showvinfo <maquina>~
  Muestra la configuración de la máquina.

- VBoxManage controlvm <maquina> <comando> ~
  Permite manejar la máquina en marcha. <pause> <resume> <reset> <poweroff>
  <savestate>

- VBoxManage modifyvm <maquina> ~
  Modifica opciones de una maquina. -> Ej: "VBoxManage modifyvm "Win" - memory
  "1024MB"

- VBoxManage registervm ~
  Permite registrar una máquina de un fichero .vbox (XML)

- VBoxManage modifyvm <maquina> --vrde on ~
  Activa el escritorio remoto (mstsc) en el puerto 3389 para la máquina. El
  puerto se puede cambiar con --vrderproperty "TCP/Ports|Address=<value>"

==============================================================================
SYSTEMCTL ARCHLINUX                                      *systemctl* *arch*

Activa "servicios" (demonios):

- systemctl enable <servicio> ~
  Activa el servicio en el arranque.

- systemctl disable <servicio>~
  Arranca la máquina.

- systemctl start/stop/restart/reload <servicio>~
  Arranca/para el servicio manualmente.

- systemctl list-units ~
  Lista servicios. Con <-all> se listan hasta los inactivos.
>
  systemctl list-units lightdm*
<

==============================================================================
RED EN ARCHLINUX                                         *netctl* *arch*

Para el manejo de la red en archlinux, nada mejor que el netctl, tanto para
wifi (wlan) como por cable (eth).

Es necesario instalar el "wpa_suplicant" para que funcione la autentificación
WPA en wifi.

Es necesario instalar el "dhcpcd" para DHCP. Quitar si existiese el servicio
dhcpcd de los servicios en el arranque.

Es necesario el "dialog" para el "wifi-menu".

Se basa en archivos de "profile" que van en {/etc/netctl}. Existen varios ejemplos
en {/etc/netctl/examples}

Por ejemplo, para ip fija en eth0:
>
    Description='A basic static ethernet connection'
    Interface=eth0
    Connection=ethernet
    IP=static
    Address=('192.168.7.11/24')
    Gateway='192.168.7.1'
    DNS=('8.8.8.8')
<
Las conexiones de wifi se pueden generar simplemente ejecutando "wifi-menu". Es
necesario que antes no exista ninguna conexión wifi activa o fallará.

Uso básico:

- netctl start/stop <profile> ~
  Arranca/para un profile.

- netctl enable/disable <profile>~
  Activa/desactiva un profile en el arranque con systemctl.

- ip addr ~
  Lista las IP's

- iw dev wlan0 info~
  Muestra el estado de la conexión wifi.

==============================================================================
PAQUETES EN ARCHLINUX                                    *pacman* *arch*

- pacman -S <paquete>~
  Instalar un paquete.

- pacman -Ss <paquete>~
  Buscar un paquete.

- pacman -Rs <paquete>~
  Borra un paquete y sus dependencias que no son necesarias por otro paquete.

- pacman -Syyu ~
  Actualiza el sistema.

- pacman -Qs <paquete> ~
  Busca en paquetes instalados.

- pacman -Qu~
  Lista paquetes para actualizar.

- pacman -Scc~
  Limpia la cache.

Archlinux tiene un sistema llamado AUR donde los usuarios pueden aportar
paquetes. Se descargan con "git clone", donde se baja un fichero llamado
"PKGBUILD" que se compila e instala con "makepkg -si". Para manejar este
repositorio existen varias herramientas, la que uso hasta el momento es "yay"
que tiene la misma sintaxis que "pacman". "yay" se encarga de todo, bajar del
git, instalar dependencias, compilar e instalar.

Ejemplos:

- yay Qu ~
  Lista paquetes para actualizar.

==============================================================================
BLUETOOTH EN ARCHLINUX                                   *bluez* *arch*

- Instalar los paquetes "bluez", "bluez-libs" y "bluez-utils".
- El servicio no arranca por defecto. Arrancarlo con "sudo systemctl start
  bluetooth.service"

- Se controla todo desde el comando "bluetoothctl". Principales comandos:

    - power on~
    Enciende el bluetooth

    - scan on/off~
    Empieza el escaneo de dispositivos bluetooth.

    - pair <dev>~
    Empareja un dispositivo y lo guarda en conocidos.

    - paired-devices ~
    Lista dispositivos emparejados.

    - connect <dev> / disconnect <dev>  ~
    Conecta o desconecta con dispositivo.

- Para hacer funcionar cascos bluetooth hay que instalar el "pulseaudio",
  "pulseaudio-alsa" y "pulseaudio-bluetooth".
- El servicio de pulseaudio corre en systemctl solo para el usuario.
  "systemctl --user start pulseaudio.service" lo arranca.
- "pulsemixer" es un buen mixer para consola.

Tethering a través de bluetooth de Android~

  - Conectar por Bluetooth el PC con el móvil.
  - En Android activar compartir conexión por Bluetooth. Redes e e internet ->
    Zona Wifi -> Compartir conexión por Bluetooth.
  - Ejecutar el siguiente comando como root:
    (Cambiar dev_"" por la mac del Bluetooth del movil)
>
    dbus-send --system --type=method_call
    --dest=org.bluez /org/bluez/hci0/dev_18_01_F1_4C_91_AD
    org.bluez.Network1.Connect string:'nap'
<
  - Se crea un enlace llamado <bnet0>.
  - Darle IP por dhcp con "dhcpcd bnep0".

==============================================================================
WSL EN WINDOWS 10                                          *WSL* *win10*

- Abrir "powershell" como administrador y ejecutar (pide reiniciar):
  >
  Enable-WindowsOptionalFeature -Online -FeatureName  Microsoft-Windows-Subsystem-Linux

- Instalar la distribución deseada desde la Microsoft Store.
- Abrir la consola instalada y dar password a root con "sudo passwd root".
- Las unidades de Win10 se montan en "/mnt" (c: -> /mnt/c).
- Por defecto el directorio HOME se situa en %localappdata% junto a los
  directorios de la distribución.
- Como root, borrar el directorio home del usuario y hacer un enlace a la
  nueva situación (d:/work/home).
- Usar la consola wsltty -> https://github.com/mintty/wsltty
- En el directorio "d:/work/home" se encuentran todos los archivos de
  configureción: *.bashrc* *.minttyrc* *.dircolors* , etc...
- Para que funcionen correctamente el chmod y los permisos, crear el fichero
  WSL.conf en /etc con:
  >
  [automount]
  enable = true
  options = "metadata,umask=22,fmask=11"

- Reiniciar los servicios LxssManager para que se remonten las unidades y tome
  los nuevos parámetros.


vim:tw=78:sw=2:ts=2:nowrap:ft=help:norl
